# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib60/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are created by pyinstaller, if you are using Point Set
#  Packaging Pyinstaller lets you created a single file or a single directory
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
pytestdebug.log

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# PEP 582; Propose to solve the problem of managing packages in Python projects.
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath stuff
.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static analyzer
.pytype/

# Cython cache files
.cython_cache/

# VSCode
.vscode/

# PyCharm
.idea/
*.iml

# Sublime Text
*.sublime-project
*.sublime-workspace

# dotenv
.env.*
!.env.example

# Sensitive configuration files
settings.ini
config.ini
credentials.json
secrets.yaml
secrets.yml

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
*.bak
*.swp
*~

# SQLite
*.sqlite
*.sqlite3

# Specific to this project
db_backups/*.dump  # Keep the directory, but ignore .dump files if they are local copies and not part of repo
                   # If db_backups should be versioned (e.g. for schema only), adjust this.
                   # For actual database backup files, they should definitely be ignored.

# If you have any local media/uploads folder that shouldn't be versioned
media/
uploads/

# Node.js
node_modules/
package-lock.json
yarn.lock